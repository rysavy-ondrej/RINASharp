using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


// Objects in CDAP have four properties: a class (data type and representation) represented by objClass,
// a name represented by objName, an object instance id represented by objInst, and a value indicated by 
// objValue.All objects(at least in effect) reside in a database in the application known as the Resource 
// Information Base(RIB), and any given Application Entity(AE) can access some subset of the objects in the RIB.
// As noted in the Overview section, objName names a unique object among all objects of the same objClass, 
// and objInst is an alias for a specific objClass+objName.The value of objInst is unique in the RIB – only 
// one object may have a specific objInst value associated with it. A value of zero (the default for an omitted value) 
// for objInst is reserved to indicate that the value is unknown or not supplied; no other values are reserved, 
// and the value is not otherwise interpreted by CDAP.

namespace System.Net.Rina
{
    public enum MessageCode
    {
        OpenRequest,
        OpenResponse,
        PullRequest,
        PullResponse,
        PushRequest,
        PushResponse,
        CloseRequest, 
        CloseResponse
    }


    /// <summary>
    /// Enumerates predefined result types. 
    /// </summary>
    public enum OperationResult
    {
        /// <summary>
        /// Operation completed sucessfully. 
        /// </summary>
        Success = 0,
        /// <summary>
        /// General error. 
        /// </summary>
        Fail, 
        /// <summary>
        /// Object creation is requested but the object with the same name already exists.
        /// </summary>
        ObjectAlreadyExistsError,

        /// <summary>
        /// The supplied ObjectClass/ObjectName pair, or supplied objInst, does not correspond to a known object. 
        /// </summary>
        ObjectNotFount,

        /// <summary>
        /// The supplied ObjectClass name does not correspond to a known class. 
        /// </summary>
        ClassNotFound
    }

    public abstract class IpcMessage
    {
        public abstract MessageCode OpCode { get; }     
    }

    public abstract class IpcMessageRequest : IpcMessage
    {
        public bool RequiresResponse;
    }

    public abstract class IpcMessageResponse : IpcMessage
    {
        /// <summary>
        /// Represents a reslt of the operation.
        /// </summary>
        public OperationResult Result;
        public string ResultReason;
    }

    /// <summary>
    /// This class represents CreateRequest CRUD message.
    /// </summary>
    /// <remarks>
    /// CreateRequest must supply the objClass and objName, and may optionally supply 
    /// the objValue for the object being created. 
    /// 
    /// If the object already exists, 
    /// or some other error occurs which prevents creation, a failure result will 
    /// be included in the reply message (if one is requested) and nothing will be changed. 
    /// 
    /// If the object does not exist, it will be created with the designated objClass and objName, 
    /// and assigned an objInst value that may be returned in the CreateResponse reply along 
    /// with a success result. If an objValue was provided, the new object is assigned that value; 
    /// if not, it has a class-dependent initial value. 
    /// </remarks>
    public class IpcOpenRequest : IpcMessageRequest
    {
        /// <summary>
        /// Specifies a class of the object.
        /// </summary>
        public string ObjectClass;
        /// <summary>
        /// Specifies a required name for the object or null if the name should be generated by the remote IPC.
        /// </summary>
        public string ObjectName;
        /// <summary>
        /// Represents a value used when creating a new object. If this value is null then the object will have a class-dependent initial value.
        /// </summary>
        public object ObjectValue;

        public override MessageCode OpCode
        {
            get
            {
                return MessageCode.OpenRequest;
            }
        }
    }

    public class IpcOpenResponse : IpcMessageResponse
    {
        public override MessageCode OpCode
        {
            get
            {
                return MessageCode.OpenResponse;
            }
        }

        /// <summary>
        /// Specifies a name of the newly created object.
        /// </summary>
        public string ObjectName;

        /// <summary>
        /// Specifies an object instance of the generated object.
        /// </summary>
        public Int64 ObjectInstance;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// An application can modify or set the value of an object using WriteRequest. 
    /// An objValue is normally included, though it is meaningful for some object 
    /// classes to have an “unset” value, which can be provided by omitting the objValue completely. 
    /// If the object does not exist, or if it cannot be written for any other reason, 
    /// an M_WRITE_R reply message will be returned (if requested) with a failure result. 
    /// If the object exists and the value is successfully written to it, 
    /// an M_WRITE_R reply message will be returned (if requested) with a success result. 
    /// 
    /// Target objects may be of different kind. It may be file or device.
    /// The objValue may be treated as an argument to the object. 
    /// </remarks>
    public class IpcPushRequest : IpcMessageRequest
    {
        /// <summary>
        /// Specifies a class of the object.
        /// </summary>
        public string ObjectClass;
        /// <summary>
        /// 
        /// </summary>
        public string ObjectName;
        /// <summary>
        /// Value to write to the object. This can be also a command if the object is not data object but control object.
        /// </summary>
        public object ObjectValue;

        public override MessageCode OpCode
        {
            get
            {
                return MessageCode.PushRequest;
            }
        }
    }

    public class IpcPushResponse : IpcMessageResponse
    {
        public override MessageCode OpCode
        {
            get
            {
                return MessageCode.PushResponse;
            }
        }
        /// <summary>
        /// If some value is produced as a part of write operation it is returned in this field.
        /// </summary>
        public object ObjectValue;
    }
}
